
// ripple effect animations
@keyframes ripple_effect {
  to { background-size: 1000% 1000%; }
}

@keyframes scale_ripple_effect {
  to { background-size: auto, 1000% 1000%; }
}

@keyframes headerbar_ripple_effect {
  from {
    background-image: radial-gradient(circle, $primary 0%, transparent 0%);
  }

  to {
    background-image: radial-gradient(circle, $primary 100%, transparent 100%);
  }
}

// Drawing mixins
@mixin entry($t, $fc:$indicator) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
//
// possible $t values:
// normal, focus, disabled, flat-normal, flat-focus, flat-disabled;
//

  @if $t == normal {
    transition: $shorter_transition, $shadow_transition;
    border: none;
    border-image: none;
    box-shadow: $shadow_1;
    background-color: if($fc != $primary, $fc, $base);
    color: if($fc != $indicator, on($indicator), $text-secondary);
    outline: none;
  }

  @if $t == focus {
    border: none;
    border-image: none;
    box-shadow: $shadow_2;
    color: if($fc != $indicator, on($indicator), $text);
    outline: none;
  }

  @if $t == disabled {
    box-shadow: $shadow_1;
    background-color: $base_alt;
    color: $text-disabled;
  }

  @if $t == fallback-normal {
    border: 1px solid $solid-border;
    box-shadow: none;
    border-image: none;
    border-radius: 2px;
    background-color: if($fc != $primary, $fc, $base);
    color: if($fc != $indicator, on($indicator), $text-secondary);
  }

  @if $t == fallback-focus {
    border: 1px solid $indicator;
    box-shadow: none;
    border-image: none;
    border-radius: 2px;
    background-color: if($fc != $indicator, $fc, $base);
    color: if($fc != $indicator, on($indicator), $text);
  }

  @if $t == fallback-disabled {
    border: 1px solid $solid-border;
    box-shadow: none;
    border-image: none;
    background-color: $base_alt;
    color: $text-disabled;
  }

  @if $t == flat-normal {
    transition: $shorter_transition,
                $shadow_transition;
    box-shadow: inset 0 -1px if($fc != $indicator, $fc, $track);
    background-color: transparent;
    color: $text;
    border-width: 0;
  }

  @if $t == flat-hover {
    background: none;
    border-width: 0;
    box-shadow: inset 0 -2px if($fc != $indicator, $fc, $text-disabled);
  }

  @if $t == flat-focus {
    background: none;
    border-width: 0;
    box-shadow: inset 0 -2px $fc;
  }

  @if $t == flat-disabled {
    border-width: 0;
    box-shadow: inset 0 -1px $track;
    background-color: transparent;
    color: $text-disabled;
  }

  @if $t == osd {
    transition: $shorter_transition, $shadow_transition;
    border: none;
    border-image: none;
    box-shadow: $shadow_1;
    background-color: lighten($header, 10%);
    color: on($primary, secondary);
  }

  @if $t == osd-focus {
    border: none;
    border-image: none;
    box-shadow: inset 0 0 0 2px $primary;
    background-color: lighten($header, 15%);
    color: on($primary);
  }

  @if $t == osd-disabled {
    box-shadow: none;
    background-color: lighten($header, 5%);
    color: on($primary, disabled);
  }
}


@mixin button($t, $c:$base, $tc:$text) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
//
// possible $t values:
// normal, hover, active, disabled, checked, checked-disabled,
// flat-normal, flat-hover, flat-active, flat-disabled, flat-checked, flat-checked-disabled;
//

  @if $t == normal {
    transition: $shorter_transition,
                $shadow_transition;
    box-shadow: $shadow_1, inset 0 0 0 9999px transparent;
    background-color: $c;
    color: $text-secondary;
    border: none;
  }

  @if $t == hover {
    box-shadow: $shadow_2, inset 0 0 0 9999px transparent;
    color: $text;
    background-color: lighten($c, 5%);
  }

  @if $t == focus {
    color: $text;
  }

  @if $t == active {
    transition: $shorter_transition;
    box-shadow: $shadow_2, inset 0 0 0 9999px $track-disabled;
    color: $text;
  }

  @if $t == disabled {
    box-shadow: none;
    background-color: $track-disabled;
    color: if($tc != $text, $text-disabled, $text-secondary-disabled);
  }

  @if $t == checked {
    background-color: $primary;
    color: on($primary);
  }

  @if $t == checked-disabled {
    background-color: gtkalpha($primary, 0.25);
    color: gtkalpha($primary, 0.5);
  }

  // flat buttons
  @if $t == flat-normal {
    transition: $shorter_transition;
    box-shadow: inset 0 0 0 9999px transparent;
    background-color: transparent;
    color: $text-secondary;
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 9999px $overlay-hover;
    color: $text;
    background-color: transparent;
  }

  @if $t == flat-focus {
    background-color: transparent;
    outline: none;
    transition: none;
  }

  @if $t == flat-active {
    transition: $shorter_transition;
    box-shadow: inset 0 0 0 9999px $overlay-active;
    color: $text;
    background-color: transparent;
  }

  @if $t == flat-disabled {
    box-shadow: none;
    background-color: transparent;
    color: if($tc != $text, gtkalpha(currentColor, 0.3), gtkalpha(currentColor, 0.9 * 0.3));
  }

  @if $t == flat-checked {
    color: $text;
    background-color: $overlay-checked;
  }

  @if $t == flat-checked-disabled {
    background-color: $overlay-normal;
    color: $text-disabled;
  }

  // fallback buttons
  @if $t == fallback-normal {
    border: 1px solid $solid-border;
    box-shadow: none;
    background-color: $c;
    color: $text-secondary;
  }

  @if $t == fallback-hover {
    box-shadow: none;
    background-color: mix($c, $text, 96%);
    color: $text;
  }

  @if $t == fallback-active {
    box-shadow: none;
    background-color: mix($c, $text, 92%);
    color: $text;
    animation: none;
  }

  @if $t == fallback-disabled {
    box-shadow: none;
    background-color: mix($background, $text, 96%);
    color: $text;
  }

  @if $t == fallback-checked {
    box-shadow: none;
    background-color: $primary;
    color: on($primary);
  }

  @if $t == fallback-checked-disabled {
    box-shadow: none;
    background-color: rgba($primary, 0.5);
    color: on($primary, disabled);
  }

  // headerbar buttons
  @if $t == header-normal {
    transition: none;
    animation: none;
    box-shadow: none;
    background-color: transparent;
    color: on($header, secondary);
  }

  @if $t == header-hover {
    transition: $shorter_transition;
    box-shadow: inset 0 0 0 9999px rgba($primary, 0.3);
    color: indicator(header);
  }

  @if $t == header-active {
    transition: $shorter_transition;
    box-shadow: inset 0 0 0 9999px $primary;
    color: on($primary);
  }

  @if $t == header-disabled {
    box-shadow: none;
    background-color: transparent;
    color: if($tc != $text, gtkalpha(currentColor, 0.3), gtkalpha(currentColor, 0.9 * 0.3));
  }

  @if $t == header-checked {
    background-color: $primary;
    color: on($primary);
  }

  @if $t == header-checked-hover {
    background-color: lighten($primary, 5%);
    background-image: none;
    box-shadow: none;
  }

  @if $t == header-checked-disabled {
    background-color: rgba($primary, 0.3);
    color: gtkalpha(on($primary), 0.3);
  }
}

@mixin overshoot($p, $t:normal, $c:$text) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($c, 0.93);

  @if $c==$text {
    $_small_gradient_color: darken($border, 10%);
    $_big_gradient_color: transparentize($text, 0.93);

    @if $t==backdrop { $_small_gradient_color: $border; }
  }

  $_small_gradient: radial-gradient(farthest-side at $p,
                                    $_small_gradient_color 85%,
                                    transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $p,
                                  $_big_gradient_color,
                                  transparentize($_big_gradient_color, 1));

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }

  @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p) {
//
// undershoot
//
// $p: position
//
// possible $p values:
// top, bottom, right, left
//

  $_undershoot_color_dark: gtkalpha($text, 0.3);
  $_undershoot_color_light: gtkalpha($base, 0.3);

  $_gradient_dir: left;
  $_dash_bg_size: 12px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: left $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 12px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p top;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
                                    $_undershoot_color_light 50%,
                                    $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
}
